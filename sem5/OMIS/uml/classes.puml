@startuml

class User {
  + id: Integer
  + fullName: String
  + email: String
  + password: String
  + personalPhoto: byte[]
  + telephoneNumber: String
  + bookingHistory: List<ParkingLot>
  + currentParkingLots: List<ParkingLot>
  + role: Role
}

class ParkingZone {
  + id: Integer
  + address: String
  + parkingLots: List<ParkingLot>
}

class ParkingLot {
  + id: Integer
  + status: ParkingLotStatus
  + type: ParkingLotType
  + isForHandicapped: boolean
  + cost: double
  + arrivalTime: LocalDateTime
  + departureTime: LocalDateTime
}

class Filter {
  + parkingLotStatus: ParkingLotStatus
  + type: ParkingLotType
  + cost: double
  + arrivalTime: LocalDateTime
}

class Review {
  + id: Integer
  + content: String
  + rating: Integer
  + createdAt: LocalDateTime
}

enum ParkingLotType {
  REGULAR,
  TRUCK,
  MOTORCYCLE
}

enum ParkingLotStatus {
  AVAILABLE,
  RESERVED,
  OCCUPIED
}

enum Role {
  USER,
  ADMIN
}

class ProfileController {
  + getRegisterForm(): String
  + getLoginForm(): String
  + getResetPasswordForm(): String
  + register(email: String, password: String, phoneNumber: String, fullName: String): String
  + resetPassword(oldPassword: String, newPassword: String): String
  + login(email: String, password: String): String
  + getBookingHistory(user: User): String
  + getCurrentParkingLots(user: User): String
  + addParkingLotToHistory(user: User, parkingLot: ParkingLot): String
  + addParkingLotToCurrentLots(user: User, parkingLot: ParkingLot): String
  + deleteParkingLotFromCurrentLots(user: User, parkingLot: ParkingLot): String
  + loadPersonalPhoto(user: User, personalPhoto: byte[]): String
  + updateUserInfo(user: User): String
  + updateRole(User: user, Role: role): String
  + getUserDetails(User: user): String
  + getUpdateForm(): String
}

class RegistrationAndAuthorizationService {
  + register(email: String, password: String, phoneNumber: String, fullName: String): User
  + resetPassword(oldPassword: String, newPassword: String): User
  + login(email: String, password: String): User
}

class ProfileService {
  + getBookingHistory(user: User): List<ParkingLot>
  + getCurrentParkingLots(user: User): List<ParkingLot>
  + addParkingLotToHistory(user: User, parkingLot: ParkingLot): void
  + addParkingLotToCurrentLots(user: User, parkingLot: ParkingLot): void
  + deleteParkingLotFromCurrentLots(user: User, parkingLot: ParkingLot): void
  + loadPersonalPhoto(user: User, personalPhoto: byte[]): void
  + updateUserInfo(user: User): User
  + updateRole(User: user, Role: role): void
  + getUserDetails(User: user): User
}

class ProfileRepository{
  + saveUser(email: String, password: String, phoneNumber: String, fullName: String): User
  + resetPassword(oldPassword: String, newPassword: String): User
  + login(email: String, password: String): User
  + getBookingHistory(user: User): List<ParkingLot>
  + getCurrentParkingLots(user: User): List<ParkingLot>
  + addParkingLotToHistory(user: User, parkingLot: ParkingLot): void
  + addParkingLotToCurrentLots(user: User, parkingLot: ParkingLot): void
  + deleteParkingLotFromCurrentLots(user: User, parkingLot: ParkingLot): void
  + loadPersonalPhoto(user: User, personalPhoto: byte[]): void
  + updateUserInfo(user: User): User
  + updateRole(User: user, Role: role): void
  + getUserDetails(User: user): User
}

class ZoneController {
  + getParkingZone(parkingZoneId: Integer): String
  + addParkingZone(parkingZone: ParkingZone): String
  + deleteParkingZone(parkingZoneId: Integer): String
  + updateParkingZone(parkingZoneId: Integer): String
  + addParkingLotToZone(parkingZoneId: Integer, parkingLot: ParkingLot): String
  + deleteParkingLotFromZone(parkingZoneId: Integer, parkingLotId: Integer): String
  + searchZoneByParkingLot(parkingLotId: Integer): String
  + getUpdateForm(parkingZoneId: Integer): String
  + getSearchForm(): String
  + getCreateForm(): String
}

class ZoneService {
  + getParkingZone(parkingZoneId: Integer): ParkingZone
  + addParkingZone(parkingZone: ParkingZone): void
  + deleteParkingZone(parkingZoneId: Integer): void
  + updateParkingZone(parkingZoneId: Integer): ParkingZone
  + addParkingLotToZone(parkingZoneId: Integer, parkingLot: ParkingLot): void
  + deleteParkingLotFromZone(parkingZoneId: Integer, parkingLot: ParkingLot): void
  + searchZoneByParkingLot(parkingLotId: Integer): ParkingZone
}

class ZoneRepository {
  + getParkingZone(parkingZoneId: Integer): ParkingZone
  + addParkingZone(parkingZone: ParkingZone): void
  + deleteParkingZone(parkingZoneId: Integer): void
  + updateParkingZone(parkingZoneId: Integer): ParkingZone
  + addParkingLotToZone(parkingZoneId: Integer, parkingLot: ParkingLot): void
  + deleteParkingLotFromZone(parkingZoneId: Integer, parkingLot: ParkingLot): void
  + searchZoneByParkingLot(parkingLotId: Integer): ParkingZone
}
class ParkingLotController {
  + getParkingLot(parkingLotId: Integer): String
  + getLotsWithFilter(filter: Filter, parkingZoneId: Integer): String
  + updateParkingLot(parkingLotId: Integer): String
  + addLotToUser(parkingLotId: Integer, userId: Integer): String
  + getUpdateForm(parkingLotId: Integer): String
  + getFilterForm(parkingZoneId: Integer): String
}

class ParkingLotService {
  + getParkingLot(parkingLotId: Integer): ParkingLot
  + getLotsWithFilter(filter: Filter, parkingZoneId: Integer): List<ParkingLot>
  + updateParkingLot(parkingLotId: Integer): ParkingLot
  + addLotToUser(parkingLotId: Integer, userId: Integer): boolean
}

class ParkingLotRepository {
  + getParkingLot(parkingLotId: Integer): ParkingLot
  + getLotsWithFilter(filter: Filter, parkingZoneId: Integer): List<ParkingLot>
  + updateParkingLot(parkingLotId: Integer): ParkingLot
  + addLotToUser(parkingLotId: Integer, userId: Integer): boolean
}

class ReviewController {
  + getReview(reviewId: Integer): String
  + addReview(review: Review): String
  + getReviews(page: Integer): String
  + deleteReview(reviewId: Integer): String
  + getCreateForm(): String
}

class ReviewService {
  + getReview(reviewId: Integer): Review
  + addReview(review: Review): Review
  + getReviews(page: Integer): List<Review>
  + deleteReview(reviewId: Integer): void
}

class ReviewRepository {
  + getReview(reviewId: Integer): Review
  + addReview(review: Review): Review
  + getReviews(page: Integer): List<Review>
  + deleteReview(reviewId: Integer): void
}

class PaymentController{
  + getPaymentForm(): String
  + processPayment(userId: Integer, amount: BigDecimal, parkingLotId: Integer): String
}

class PaymentService {
  + processPayment(userId: Integer, amount: BigDecimal, parkingLotId: Integer): boolean
}

class MainController {
  + delegate()
}

class Main{

}

Main "1" *-- "1" MainController



ProfileController "1" o-- "1" ProfileService: - profileService
ProfileController "1" o-- "1" RegistrationAndAuthorizationService: - registrationAndAuthorizationService
ProfileService "1" o-- "1" ProfileRepository: - ProfileRepository
RegistrationAndAuthorizationService "1" o-- "1" ProfileRepository: - ProfileRepository

ReviewController "1" o-- "1" ReviewService: - reviewService
ReviewService "1" o-- "1" ReviewRepository: - reviewRepository


ZoneController "1" o-- "1" ZoneService: - zoneService
ZoneService "1" o-- "1" ZoneRepository: - zoneRepository

ParkingLotController "1" o-- "1" ParkingLotService: - parkingLotService
ParkingLotService "1" o-- "1" ParkingLotRepository: - parkingLotService

PaymentController "1" o-- "1" PaymentService: - paymentService

ParkingLotType "1" --* "1" ParkingLot
ParkingLotStatus "1" --* "1" ParkingLot
Role "1" --* "1" User


ParkingZone "1" ..> "N" ParkingLot
User "1" ..> "0..*" ParkingLot

ProfileController ..> User: <<create>>
ProfileRepository "1" o-- "0..*"User: - user
ProfileService ..> User: <<use>>
RegistrationAndAuthorizationService ..> User: <<create>>

ReviewController ..> Review: <<create>>
ReviewRepository "1" o-- "0..*"Review: - review
ReviewService ..> Review: <<use>>
Review "1" o-- "1" User: - user

ZoneController ..> ParkingZone: <<create>>
ZoneRepository "1" o-- "0..*"ParkingZone: - parkingZone
ZoneService ..> ParkingZone: <<use>>

ZoneController ..> ParkingLot: <<create>>
ZoneRepository ..> ParkingLot
ZoneService ..> ParkingLot: <<use>>

ParkingLotController ..> ParkingLot: <<create>>
ParkingLotRepository "1" o-- "0..*"ParkingLot: - parkingLot
ParkingLotService ..> ParkingLot: <<use>>

ParkingLotController ..> Filter: <<create>>
ParkingLotRepository ..> Filter: <<use>>
ParkingLotService ..> Filter : <<use>>

PaymentService ..> User: <<use>>
PaymentController ..> User: <<use>>
@enduml
